<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo 博客搭建和使用教程(Windows)</title>
    <link href="/2023/10/08/Hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B-Windows/"/>
    <url>/2023/10/08/Hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B-Windows/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本文旨在让大家学会从 0 开始搭建一个属于自己的静态博客网站，使用 Hexo 博客框架搭建并部署到 Github，让您可以在不用购买云服务器的情况下拥有一个属于自己的博客网站。</p><h3 id="Hexo-介绍"><a href="#Hexo-介绍" class="headerlink" title="Hexo 介绍:"></a>Hexo 介绍:</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br>Hexo 官方中文网站: Hexo</p><h2 id="第一章-前期准备"><a href="#第一章-前期准备" class="headerlink" title="第一章 前期准备"></a>第一章 前期准备</h2><h3 id="1-1-安装前所需环境介绍"><a href="#1-1-安装前所需环境介绍" class="headerlink" title="1.1 安装前所需环境介绍"></a>1.1 安装前所需环境介绍</h3><p>安装 Hexo 之前，需要确保您的 PC 中已经安装以下工具:</p><p>Node.js <a href="nodejs.org">地址</a><br>Git <a href="git-scm.com">地址</a></p><p>如果您的电脑已经具备所需工具，那么您可以直接进入第二章开始安装 Hexo 了。</p><p>如果您还未安装这两款工具，那么请按照以下步骤进行安装。</p><h3 id="1-2-安装-Git"><a href="#1-2-安装-Git" class="headerlink" title="1.2 安装 Git"></a>1.2 安装 Git</h3><p>官方下载地址: <a href="git-scm.com">Git - Downloading Package</a><br>安装与使用: 问度娘<br>注意事项: 建议选择 64-bit Git for Windows Setup，并且安装时要勾选 Add to PATH 选项</p><p>安装后验证: 在 cmd 中输入命令 git –version, 查看 Git 版本</p><h3 id="1-3-安装-Node-js"><a href="#1-3-安装-Node-js" class="headerlink" title="1.3 安装 Node.js"></a>1.3 安装 Node.js</h3><p>官方下载地址: <a href="nodejs.org">Node.js</a><br>安装与使用: 问度娘<br>注意事项: 使用 Node.js 官方安装程序时，请确保勾选 Add to PATH 选项（默认已勾选）</p><p>安装后验证: 在 cmd 中输入命令 node -v, 查看 Node 版本</p><p>至此，您已经完成了安装 Hexo 所需的所有额外环境，接下来就可以安装 Hexo 了。</p><h2 id="第二章-安装-Hexo"><a href="#第二章-安装-Hexo" class="headerlink" title="第二章 安装 Hexo"></a>第二章 安装 Hexo</h2><h3 id="2-1-安装-cnpm"><a href="#2-1-安装-cnpm" class="headerlink" title="2.1 安装 cnpm"></a>2.1 安装 cnpm</h3><p>当您安装 Node.js 之后，便可以在命令行中通过 node install 命令安装您想要的程序了。但本文推荐使用 cnpm 安装 Hexo，所以需要先通过 npm install 安装 cnpm。</p><p>命令: <code>npm install -g cnpm --registry==https://registry.npm.taobao.org</code><br>说明: <code>-g</code> 表示进行全局安装，<code>--registry==https://registry.npm.taobao.org</code> 表示使用淘宝镜像安装 cnpm<br>安装后验证: 在 cmd 中输入命令 cnpm -v, 可查看 cnpm 版本</p><h3 id="2-2-安装-Hexo"><a href="#2-2-安装-Hexo" class="headerlink" title="2.2 安装 Hexo"></a>2.2 安装 Hexo</h3><p>命令: <code>cnpm install -g hexo-cli</code><br>说明: -g 表示全局安装，hexo-cli 为所安装的包<br>安装后验证: 在 cmd 中输入命令 hexo -v, 可查看 hexo 版本</p><h3 id="2-3-注意事项"><a href="#2-3-注意事项" class="headerlink" title="2.3 注意事项"></a>2.3 注意事项</h3><p>建议永远安装最新版本的 Hexo，以及 推荐的 Node.js 版本。</p><p>至此，您已成成功安装了 Hexo，接下来进入 Github 的配置吧!</p><h2 id="第三章-配置-Github"><a href="#第三章-配置-Github" class="headerlink" title="第三章 配置 Github"></a>第三章 配置 Github</h2><p>如果您还没有 Gihub 账户，请注册一个 Github 账户吧!</p><h3 id="3-1-在-Github-上创建仓库"><a href="#3-1-在-Github-上创建仓库" class="headerlink" title="3.1 在 Github 上创建仓库"></a>3.1 在 Github 上创建仓库</h3><p>新建一个名为: <a href="http://username.github.io/">http://username.github.io</a> 的仓库(username 为您的 Github 用户名)<br>比如，如果您的 github 用户名是 test，那么您就新建名为 <a href="http://test.github.io/">http://test.github.io</a> 的仓库（必须是您的用户名，其它名称无效），将来你的网站访问地址就是 <a href="https://test.github.io/">https://test.github.io</a> 了。由此可见，每一个 github 账户最多只能创建一个这样可以直接使用域名访问的仓库。</p><p>注意事项:<br>注册的邮箱一定要验证，否则不会成功;<br>仓库名字必须是：<a href="http://username.github.io,其中/">http://username.github.io，其中</a> username 是你的用户名;<br>仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久</p><h3 id="3-2-配置-SSH-免密登录"><a href="#3-2-配置-SSH-免密登录" class="headerlink" title="3.2 配置 SSH 免密登录"></a>3.2 配置 SSH 免密登录</h3><p>为什么要配置这个呢？因为您提交代码肯定要拥有您的 github 权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用 ssh key 来解决本地和服务器的连接问题。</p><p>注: 如果您已经配置过 SSH，可跳过此步骤</p><p>步骤:</p><p>1、首先打开电脑文件夹，找到 C:\Users\您的用户名\ .ssh文件夹并删除(如果没有，则直接进入第二步)</p><p>2、在 C:\Users\您的用户名 文件夹下右键打开 Git Bash Here 输入命令: ssh-keygen -t rsa -C “你的github登录邮箱” 生成.ssh秘钥，输入后连敲三次回车，出现下图情况代表成功</p><p>3、生成了一个新的 C:\Users\您的用户名\ .ssh文件夹，打开这个文件夹，找到 .ssh\id_rsa.pub 文件，记事本打开并复制里面的内容</p><p>4、打开您的 github 主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key，把复制的内容粘贴进去，title 随便填，保存即可，我们的公钥就添加成功了，设置好如下图:</p><p>5、检测是否设置成功:</p><p>输入命令: ssh -T <a href="mailto:&#103;&#105;&#x74;&#64;&#103;&#x69;&#x74;&#104;&#117;&#x62;&#46;&#99;&#111;&#x6d;">&#103;&#105;&#x74;&#64;&#103;&#x69;&#x74;&#104;&#117;&#x62;&#46;&#99;&#111;&#x6d;</a></p><p>看到以上信息说明 SSH 已配置成功!</p><p>6、此外您还需要如下配置:</p><p>命令: git config –global user.name “您的 Github username” &#x2F;&#x2F; 注意是 username, 而非昵称</p><p>命令: git config –global user.email “<a href="mailto:&#120;&#120;&#120;&#64;&#x71;&#113;&#46;&#x63;&#x6f;&#x6d;">&#120;&#120;&#120;&#64;&#x71;&#113;&#46;&#x63;&#x6f;&#x6d;</a>“ &#x2F;&#x2F; 填写您的 github 注册邮箱</p><p>至此，您已经成功配置好了 Github，接下来开始搭建个人博客吧!</p><h2 id="第四章-使用-Hexo-搭建博客"><a href="#第四章-使用-Hexo-搭建博客" class="headerlink" title="第四章 使用 Hexo 搭建博客"></a>第四章 使用 Hexo 搭建博客</h2><h3 id="4-1-初始化"><a href="#4-1-初始化" class="headerlink" title="4.1 初始化"></a>4.1 初始化</h3><p>1、在电脑的某个磁盘或路径新建一个名为 hexo 的文件夹(名字可以随便取)，比如我的是 D:\hexo，由于这个文件夹将来就作为您存放代码的地方，所以最好不要随便放</p><p>2、在 D:\hexo 文件夹下右键打开 Git Bash Here，输入命令: hexo init 进行初始化</p><p>hexo 会自动下载一些文件到这个目录，包括 node_modules，目录结构如下图:<br><img src="https://pic2.zhimg.com/80/v2-7d8b10608de25181e9ab19e463056f91_720w.webp"></p><p>3、执行命令: hexo g 会在 public 文件夹下生成相关的 html 文件，这些文件将来需要提交到 Github 上</p><p>4、执行命令: hexo s 可以开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 即可看到博客内容</p><h3 id="4-2-将博客部署到-Github"><a href="#4-2-将博客部署到-Github" class="headerlink" title="4.2 将博客部署到 Github"></a>4.2 将博客部署到 Github</h3><p>1、在 D:\hexo 目录下安装 hexo-deployer-git 插件</p><p>命令: npm install hexo-deployer-git –save<br>2、编辑 D:\hexo 目录下的 _config.yml 文件，在文件末尾添加如下内容:</p><p>注意: 其中 repository 中的内容即为 github 个人主页链接地址</p><p>3、在 D:\hexo 目录下，输入命令: hexo d 将本地 blog 推送到 github 远程仓库，也可能需要输入 username &amp; pwd</p><p>推送成功后，即可通过 <a href="https://jzhangcser01.github.io/">https://jzhangcser01.github.io/</a> 访问个人博客了!</p><p>至此，您已经会使用 Hexo 搭建博客了，但是您会发现此时访问博客主页，页面很不美观，那么接下来就对您的博客进行美化吧!</p><h2 id="第五章-更换主题"><a href="#第五章-更换主题" class="headerlink" title="第五章 更换主题"></a>第五章 更换主题</h2><p>在 D:\hexo 目录下有一个 themes 文件夹，该文件夹下存放着 hexo 所使用的主题</p><h3 id="5-1-搜索主题"><a href="#5-1-搜索主题" class="headerlink" title="5.1 搜索主题"></a>5.1 搜索主题</h3><p>hexo 官方提供了很多主题供我们使用，地址: <a href="https://hexo.io/themes/">https://hexo.io/themes/</a><br>您可以在 github 中直接搜索 hexo 主题</p><h3 id="5-2-下载主题"><a href="#5-2-下载主题" class="headerlink" title="5.2 下载主题"></a>5.2 下载主题</h3><p>1、在 D:\hexo 目录下右键 Git Bash Here</p><p>2、执行命令: git clone 主题http链接 themes&#x2F;主题名称 将主题下载至 themes 文件夹下</p><p>可以在该文件夹下查看是否下载成功</p><h3 id="5-3-使用主题"><a href="#5-3-使用主题" class="headerlink" title="5.3 使用主题"></a>5.3 使用主题</h3><p>打开 D:\hexo 目录下的 _config.yml 文件，在里面找到 theme: landscape改为theme: yilia-plus(yilia-plus为我们要使用的主题名)，然后执行 hexo clean 先删除旧的 html 文件，再执行 hexo g 重新生成，再执行 hexo d 推送到远程仓库</p><p>在浏览器输入相应域名，发现主题已更换<br>注意: 可能需要等一段时间刷新才更换 please be patient<br>5.4 修改主题内容<br>您可以在 themes&#x2F;yilia-plus 文件夹中查看该主题的内容，并可编辑该文件夹中的 _config.yml 文件修改主题样式</p><p>注意: 记得编辑根目录下的 _config.yml 文件，将信息修改为自己的</p><h2 id="第六章-使用-Typora-编写博客"><a href="#第六章-使用-Typora-编写博客" class="headerlink" title="第六章 使用 Typora 编写博客"></a>第六章 使用 Typora 编写博客</h2><h3 id="6-1-Typora-介绍"><a href="#6-1-Typora-介绍" class="headerlink" title="6.1 Typora 介绍"></a>6.1 Typora 介绍</h3><p>Typora 是一款轻便简洁的 Markdown 编辑器，支持即时渲染技术，这也是与其他 Markdown 编辑器最显著的区别。即时渲染使得你写Markdown 就像是写 Word 文档一样流畅自如，不像其他编辑器的有编辑栏和显示栏。</p><p>优点:<br>简洁美观<br>实时预览<br>扩展语法<br>跨平台</p><h3 id="6-2-安装-Typora"><a href="#6-2-安装-Typora" class="headerlink" title="6.2 安装 Typora"></a>6.2 安装 Typora</h3><p>官网: <a href="typoraio.cn">Typora 官方中文站</a></p><p>遗憾的是去年 Typora 还是免费的，今年的新版居然开始收费了。</p><p>为此，我为大家准备了旧版免费的安装包</p><p>地址: <a href="https://www.aliyundrive.com/s/1SQzr6JXeR8">typora-setup-x64.exe</a></p><h3 id="6-3-写博客"><a href="#6-3-写博客" class="headerlink" title="6.3 写博客"></a>6.3 写博客</h3><p>1、在 D:\hexo 目录下，通过输入命令: hexo new “文章 title” 会在 &#x2F;source 文件夹下生成对应文章的 .md 文件，然后就可以通过 Typora 打开此文件编写文章并保存了</p><p>2、当您写完该篇文章后，依次输入以下命令:</p><p>hexo clean 删除 public 文件夹，即删除旧的博客文章</p><p>hexo g 生成 public 文件夹，即生成新的博客文章相关 html 文件</p><p>hexo d 将博客推送到 github</p><h3 id="6-4-向-Hexo-博客中插入图片"><a href="#6-4-向-Hexo-博客中插入图片" class="headerlink" title="6.4 向 Hexo 博客中插入图片"></a>6.4 向 Hexo 博客中插入图片</h3><p>Hexo 有多种图片插入方式，可以将图片存放在本地引用或者将图片放在 CDN 上引用。</p><p>1、本地引用–绝对路径</p><p>当 Hexo 项目中只用到少量图片时，可以将图片统一放在 source&#x2F;images 文件夹中，通过 markdown 语法访问它们。</p><p><img src="/images/image.jpg" alt="可以写关于图片的描述"><br>图片既可以在首页内容中访问到，也可以在文章正文中访问到。</p><p>2、本地引用–相对路径</p><p>图片除了可以放在统一的 images 文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置 _config.yml 来生成。</p><p>打开项目根目录中的 _config.yml 文件，将 _config.yml文件中的配置项 post_asset_folder 设为 true 后，执行命令 hexo new “post_name”，在 source&#x2F;posts 中会生成文章 post_name.md 和同名文件夹 post_name。</p><p>将图片资源放在 post_name 文件夹中，文章就可以使用相对路径引用图片资源了。</p><p><img src="/image.jpg"><br>但是使用这种引用方式，图片只能在文章中显示，但无法在首页中正常显示。</p><p>如果希望图片在文章和首页中同时显示，可以使用标签插件语法(推荐使用这种引用方法)。</p><p>3、CDN 引用(不推荐)</p><p>除了在本地存储图片，还可以将图片上传到一些免费的 CDN 服务中。</p><p>比如Cloudinary （梯子访问）提供的图片CDN服务，在 Cloudinary 中上传图片后，会生成对应的 url 地址，将地址直接拿来引用即可。或者上传到路过图床（不用梯子）。</p><h2 id="第七章-总结"><a href="#第七章-总结" class="headerlink" title="第七章 总结"></a>第七章 总结</h2><p>以上就是本人搭建博客的过程以及遇到的一些问题和解决办法，按照本人搭建博客的步骤就可以搭建一个相当不错的静态博客网站了。</p><p>如果想要让 baidu 和 google 搜索引擎收录自己的网站地址，可自行必应搜索。</p><p>如果大家在搭建博客的过程中遇到问题，可以在本人的 Github Issues 中提出: <a href="https://github.com/BinglingQwQ/MyHexoBlog/issues">this</a></p><p>谢谢大家!</p><h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程:"></a>参考教程:</h2><p><a href="https://www.bilibili.com/video/BV1Yb411a7ty?share_source=copy_web&amp;vd_source=d698f3adeb829e7ec38eaffd67915950">https://www.bilibili.com/video/BV1Yb411a7ty?share_source=copy_web&amp;vd_source=d698f3adeb829e7ec38eaffd67915950</a></p>]]></content>
    
    
    <categories>
      
      <category>个人博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】 AT_abc220_b [ABC220B] Base K</title>
    <link href="/2023/10/05/%E9%A2%98%E8%A7%A3-AT-abc220-b-ABC220B-Base-K/"/>
    <url>/2023/10/05/%E9%A2%98%E8%A7%A3-AT-abc220-b-ABC220B-Base-K/</url>
    
    <content type="html"><![CDATA[<h2 id="题目传送门："><a href="#题目传送门：" class="headerlink" title="题目传送门："></a>题目传送门：</h2><ol><li><p><a href="https://atcoder.jp/contests/abc220/tasks/abc220_b" title="AtCoder">AtCoder</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/AT_abc220_b" title="洛谷">洛谷</a></p></li></ol><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>给出两个 $K$ 进制数 $A,B$，要求 $A \times B$ 在十进制下的值。</p><p>我们很容易想到把 $A$ 和 $B$ 都转化为十进制数，再相乘。</p><h2 id="text-注意！"><a href="#text-注意！" class="headerlink" title="$\text{注意！}$"></a>$\text{注意！}$</h2><p>$A,B$ 都是 $K$ 进制数，不是 $10$ 进制整数，不能用 <code>int</code> 输入，要用 <code>string</code>。</p><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">s</span><span class="hljs-params">(string x,<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> res=<span class="hljs-number">1</span>,ans=<span class="hljs-number">0</span>,si=x.<span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=si<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>&#123;<br>ans+=(x[i]-<span class="hljs-string">&#x27;0&#x27;</span>)*res;<br>res*=k;<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> k,ans;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string a,b;<br>cin&gt;&gt;k&gt;&gt;a&gt;&gt;b;<br>ans=<span class="hljs-built_in">s</span>(a,k)*<span class="hljs-built_in">s</span>(b,k);<br>cout&lt;&lt;ans&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码已<a href="https://atcoder.jp/contests/abc220/submissions/45278574">AC</a>，可放心食用。</p>]]></content>
    
    
    <categories>
      
      <category>C++编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
